apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ self.fullname() }}
  labels:
    app: {{ self.name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version | replace("+","_") }}
    release: {{ Release.Name }}
    heritage: {{ Release.Service }}
data:
  config.json: |-
{%- if Values.mcrouterCommandParams.configFile %}{{ range .Files.Lines Values.mcrouterCommandParams.configFile }}
    {{ . }}{%- endif %}
{%- else %}
    {%- if Values.memcached.enabled %}
    {
      "pools": {
        "A": {
          "servers": [
            {%- set global = . %}
            {%- range $i, set e = until (Values.memcached.replicaCount | int)() %}
            "{{ globalRelease.Name }}-memcached-{{ i }}.{{ globalRelease.Name }}-memcached.{{ globalRelease.Namespace }}.svc.cluster.local:11211",
            {%- endif %}
          ]
        }
      },
      "route": "PoolRoute|A"
    }
    {%- endif %}
{%- endif %}#---{%- if Values.controller=="daemonset" %}
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ self.fullname() }}
  labels:
    app: {{ self.fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
  annotations:
    checksum/config: ""
spec:
  template:
    metadata:
      labels:
        app: {{ self.fullname() }}
        chart: "{{ Chart.Name }}-{{ Chart.Version }}"
        release: "{{ Release.Name }}"
    spec:
      containers:
      - name: {{ self.fullname() }}
        image: {{ Values.image }}
        imagePullPolicy: {{ Values.imagePullPolicy | default("", true) | quote() }}
        command: ["mcrouter"]
        args:
        - -p {{ Values.mcrouterCommandParams.port }}
        - --config-file=/etc/mcrouter/config.json
        volumeMounts:
        - name: config
          mountPath: /etc/mcrouter
        ports:
        - name: mcrouter-port
          containerPort: {{ Values.mcrouterCommandParams.port }}
          hostPort: {{ Values.daemonset.hostPort }}
        livenessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml(Values.resources) | indent(10) }}
      volumes:
      - name: config
        configMap:
          name: {{ self.fullname() }}
{%- endif -%}#---apiVersion: v1
kind: Service
metadata:
  name: {{ self.fullname() }}
  labels:
    app: {{ self.fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
spec:
  clusterIP: None
  ports:
  - name: mcrouter-port
    port: {{ Values.mcrouterCommandParams.port }}
    targetPort: mcrouter-port
  selector:
    app: {{ self.fullname() }}
#---{%- if Values.controller=="statefulset" %}
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ self.fullname() }}
  labels:
    app: {{ self.fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
  annotations:
    checksum/config: ""
spec:
  serviceName: {{ self.fullname() }}
  replicas: {{ Values.statefulset.replicas }}
  template:
    metadata:
      labels:
        app: {{ self.fullname() }}
        chart: "{{ Chart.Name }}-{{ Chart.Version }}"
        release: "{{ Release.Name }}"
        heritage: "{{ Release.Service }}"
    spec:
      affinity:
        podAntiAffinity:
        {%- if Values.statefulset.antiAffinity=="hard" %}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app:  {{ self.fullname() }}
                release: {{ Release.Name | quote() }}
        {%- elif Values.statefulset.antiAffinity=="soft" %}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app:  {{ self.fullname() }}
                  release: {{ Release.Name | quote() }}
        {%- endif %}
      containers:
      - name: {{ self.fullname() }}
        image: {{ Values.image }}
        imagePullPolicy: {{ Values.imagePullPolicy | default("", true) | quote() }}
        command: ["mcrouter"]
        args:
        - -p {{ Values.mcrouterCommandParams.port }}
        - --config-file=/etc/mcrouter/config.json
        volumeMounts:
        - name: config
          mountPath: /etc/mcrouter
        ports:
        - name: mcrouter-port
          containerPort: {{ Values.mcrouterCommandParams.port }}
        livenessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml(Values.resources) | indent(10) }}
      volumes:
      - name: config
        configMap:
          name: {{ self.fullname() }}
{%- endif %}
