{%- if Values.rbac.create %}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__alertmanager__fullname() }}
subjects:
  - kind: ServiceAccount
    name: {{ self.prometheus__alertmanager__fullname() }}
    namespace: {{ Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.kubeStateMetrics.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
subjects:
  - kind: ServiceAccount
    name: {{ self.prometheus__kubeStateMetrics__fullname() }}
    namespace: {{ Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.nodeExporter.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__nodeExporter__fullname() }}
subjects:
  - kind: ServiceAccount
    name: {{ self.prometheus__nodeExporter__fullname() }}
    namespace: {{ Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
subjects:
  - kind: ServiceAccount
    name: {{ self.prometheus__server__fullname() }}
    namespace: {{ Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ self.prometheus__server__fullname() }}
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.kubeStateMetrics.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - watch
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
{%- endif %}
#---{%- if Values.alertmanager.enabled and ( empty  Values.alertmanager.configMapOverrideName) -%}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__alertmanager__fullname() }}
data:
{{ toYaml(Values.alertmanagerFiles) | indent(2) }}
{%- endif %}
#---{%- if ( empty  Values.server.configMapOverrideName) -%}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
data:
{{ toYaml(Values.serverFiles) | indent(2) }}
{%- endif %}
#---{%- if Values.nodeExporter.enabled -%}
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.nodeExporter.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__nodeExporter__fullname() }}
spec:
  template:
    metadata:
    {%- if Values.nodeExporter.podAnnotations %}
      annotations:
{{ toYaml(Values.nodeExporter.podAnnotations) | indent(8) }}
    {%- endif %}
      labels:
        app: {{ self.prometheus__name() }}
        component: "{{ Values.nodeExporter.name }}"
        release: {{ Release.Name }}
    spec:
      serviceAccountName: {%- if Values.rbac.create %}{{ self.prometheus__nodeExporter__fullname() }}{%- else %}"{{ Values.nodeExporter.serviceAccountName }}"{%- endif %}
      containers:
        - name: {{ self.prometheus__name() }}-{{ Values.nodeExporter.name }}
          image: "{{ Values.nodeExporter.image.repository }}:{{ Values.nodeExporter.image.tag }}"
          imagePullPolicy: "{{ Values.nodeExporter.image.pullPolicy }}"
          args:
            - --collector.procfs=/host/proc
            - --collector.sysfs=/host/sys
          {%- for key, value in Values.nodeExporter.extraArgs.iteritems() %}
            - --{{ key }}={{ value }}
          {%- endfor %}
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: {{ Values.nodeExporter.service.hostPort }}
          resources:
{{ toYaml(Values.nodeExporter.resources) | indent(12) }}
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
          {%- for item in Values.nodeExporter.extraHostPathMounts %}
            - name: {{ item.name }}
              mountPath: {{ item.mountPath }}
              readOnly: {{ item.readOnly }}
          {%- endfor %}
      hostNetwork: true
      hostPID: true
    {%- if Values.nodeExporter.tolerations %}
      tolerations:
{{ toYaml(Values.nodeExporter.tolerations) | indent(8) }}
    {%- endif %}
    {%- if Values.nodeExporter.nodeSelector %}
      nodeSelector:
{{ toYaml(Values.nodeExporter.nodeSelector) | indent(8) }}
    {%- endif %}
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
      {%- for item in Values.nodeExporter.extraHostPathMounts %}
        - name: {{ item.name }}
          hostPath:
            path: {{ item.hostPath }}
      {%- endfor %}
{%- endif -%}
#---{%- if Values.alertmanager.enabled and Values.alertmanager.ingress.enabled -%}
{%- set releaseName = Release.Name -%}
{%- set serviceName =  self.prometheus__alertmanager__fullname() %}
{%- set servicePort = Values.alertmanager.service.servicePort -%}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
{%- if Values.alertmanager.ingress.annotations %}
  annotations:
{{ toYaml(Values.alertmanager.ingress.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__alertmanager__fullname() }}
spec:
  rules:
  {%- for item in Values.alertmanager.ingress.hosts %}
    - host: {{ item }}
      http:
        paths:
          - backend:
              serviceName: {{ serviceName }}
              servicePort: {{ servicePort }}
  {%- endfor -%}
{%- if Values.alertmanager.ingress.tls %}
  tls:
{{ toYaml(Values.alertmanager.ingress.tls) | indent(4) }}
  {%- endif -%}
{%- endif -%}
#---{%- if Values.pushgateway.enabled and Values.pushgateway.ingress.enabled -%}
{%- set releaseName = Release.Name -%}
{%- set serviceName =  self.prometheus__pushgateway__fullname() %}
{%- set servicePort = Values.pushgateway.service.servicePort -%}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
{%- if Values.pushgateway.ingress.annotations %}
  annotations:
{{ toYaml(Values.pushgateway.ingress.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.pushgateway.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__pushgateway__fullname() }}
spec:
  rules:
  {%- for item in Values.pushgateway.ingress.hosts %}
    - host: {{ item }}
      http:
        paths:
          - backend:
              serviceName: {{ serviceName }}
              servicePort: {{ servicePort }}
  {%- endfor -%}
{%- if Values.pushgateway.ingress.tls %}
  tls:
{{ toYaml(Values.pushgateway.ingress.tls) | indent(4) }}
  {%- endif -%}
{%- endif -%}
#---{%- if Values.server.ingress.enabled -%}
{%- set releaseName = Release.Name -%}
{%- set serviceName =  self.prometheus__server__fullname() %}
{%- set servicePort = Values.server.service.servicePort -%}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
{%- if Values.server.ingress.annotations %}
  annotations:
{{ toYaml(Values.server.ingress.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
spec:
  rules:
  {%- for item in Values.server.ingress.hosts %}
    - host: {{ item }}
      http:
        paths:
          - backend:
              serviceName: {{ serviceName }}
              servicePort: {{ servicePort }}
  {%- endfor -%}
{%- if Values.server.ingress.tls %}
  tls:
{{ toYaml(Values.server.ingress.tls) | indent(4) }}
  {%- endif -%}
{%- endif -%}
#---{%- if Values.networkPolicy.enabled %}
apiVersion: {{ self.prometheus__networkPolicy__apiVersion() }}
kind: NetworkPolicy
metadata:
  name: {{ self.prometheus__alertmanager__fullname() }}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
spec:
  podSelector:
    matchLabels:
      app: {{ self.prometheus__name() }}
      component: "{{ Values.alertmanager.name }}"
      release: {{ Release.Name }}
  ingress:
    - from:
      - podSelector:
          matchLabels:
            release: {{ Release.Name }}
            component: "{{ Values.server.name }}"
    - ports:
      - port: 9093
{%- endif %}
#---{%- if Values.networkPolicy.enabled %}
apiVersion: {{ self.prometheus__networkPolicy__apiVersion() }}
kind: NetworkPolicy
metadata:
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.kubeStateMetrics.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
spec:
  podSelector:
    matchLabels:
      app: {{ self.prometheus__name() }}
      component: "{{ Values.kubeStateMetrics.name }}"
      release: {{ Release.Name }}
  ingress:
  - from:
    - podSelector:
        matchLabels:
          release: {{ Release.Name }}
          component: "{{ Values.server.name }}"
  - ports:
    - port: 8080
{%- endif %}
#---{%- if Values.networkPolicy.enabled %}
apiVersion: {{ self.prometheus__networkPolicy__apiVersion() }}
kind: NetworkPolicy
metadata:
  name: {{ self.prometheus__server__fullname() }}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
spec:
  podSelector:
    matchLabels:
      app: {{ self.prometheus__name() }}
      component: "{{ Values.server.name }}"
      release: {{ Release.Name }}
  ingress:
    - ports:
      - port: 9090
{%- endif %}
#---{%- if Values.alertmanager.enabled and Values.alertmanager.persistentVolume.enabled -%}
{%- if  not  Values.alertmanager.persistentVolume.existingClaim -%}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  {%- if Values.alertmanager.persistentVolume.annotations %}
  annotations:
{{ toYaml(Values.alertmanager.persistentVolume.annotations) | indent(4) }}
  {%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__alertmanager__fullname() }}
spec:
  accessModes:
{{ toYaml(Values.alertmanager.persistentVolume.accessModes) | indent(4) }}
{%- if Values.alertmanager.persistentVolume.storageClass %}
{%- if ("-"==Values.alertmanager.persistentVolume.storageClass) %}
  storageClassName: ""
{%- else %}
  storageClassName: "{{ Values.alertmanager.persistentVolume.storageClass }}"
{%- endif %}
{%- endif %}
  resources:
    requests:
      storage: "{{ Values.alertmanager.persistentVolume.size }}"
{%- endif -%}
{%- endif -%}
#---{%- if Values.server.persistentVolume.enabled -%}
{%- if  not  Values.server.persistentVolume.existingClaim -%}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  {%- if Values.server.persistentVolume.annotations %}
  annotations:
{{ toYaml(Values.server.persistentVolume.annotations) | indent(4) }}
  {%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
spec:
  accessModes:
{{ toYaml(Values.server.persistentVolume.accessModes) | indent(4) }}
{%- if Values.server.persistentVolume.storageClass %}
{%- if ("-"==Values.server.persistentVolume.storageClass) %}
  storageClassName: ""
{%- else %}
  storageClassName: "{{ Values.server.persistentVolume.storageClass }}"
{%- endif %}
{%- endif %}
  resources:
    requests:
      storage: "{{ Values.server.persistentVolume.size }}"
{%- endif -%}
{%- endif -%}
#---{%- if Values.rbac.create %}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__alertmanager__fullname() }}
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.kubeStateMetrics.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.nodeExporter.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__nodeExporter__fullname() }}
{%- endif %}
#---{%- if Values.rbac.create %}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
{%- endif %}
#---{%- if Values.alertmanager.enabled -%}
apiVersion: v1
kind: Service
metadata:
{%- if Values.alertmanager.service.annotations %}
  annotations:
{{ toYaml(Values.alertmanager.service.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
{%- if Values.alertmanager.service.labels %}
{{ toYaml(Values.alertmanager.service.labels) | indent(4) }}
{%- endif %}
  name: {{ self.prometheus__alertmanager__fullname() }}
spec:
{%- if Values.alertmanager.service.clusterIP %}
  clusterIP: {{ Values.alertmanager.service.clusterIP }}
{%- endif %}
{%- if Values.alertmanager.service.externalIPs %}
  externalIPs:
{{ toYaml(Values.alertmanager.service.externalIPs) | indent(4) }}
{%- endif %}
{%- if Values.alertmanager.service.loadBalancerIP %}
  loadBalancerIP: {{ Values.alertmanager.service.loadBalancerIP }}
{%- endif %}
{%- if Values.alertmanager.service.loadBalancerSourceRanges %}
  loadBalancerSourceRanges:
  {%- for cidr in Values.alertmanager.service.loadBalancerSourceRanges %}
    - {{ cidr }}
  {%- endfor %}
{%- endif %}
  ports:
    - name: http
      port: {{ Values.alertmanager.service.servicePort }}
      protocol: TCP
      targetPort: 9093
    {%- if Values.alertmanager.service.nodePort %}
      nodePort: {{ Values.alertmanager.service.nodePort }}
    {%- endif %}
  selector:
    app: {{ self.prometheus__name() }}
    component: "{{ Values.alertmanager.name }}"
    release: {{ Release.Name }}
  type: "{{ Values.alertmanager.service.type }}"
{%- endif %}
#---{%- if Values.kubeStateMetrics.enabled -%}
apiVersion: v1
kind: Service
metadata:
{%- if Values.kubeStateMetrics.service.annotations %}
  annotations:
{{ toYaml(Values.kubeStateMetrics.service.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.kubeStateMetrics.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
{%- if Values.kubeStateMetrics.service.labels %}
{{ toYaml(Values.kubeStateMetrics.service.labels) | indent(4) }}
{%- endif %}
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
spec:
{%- if Values.kubeStateMetrics.service.clusterIP %}
  clusterIP: {{ Values.kubeStateMetrics.service.clusterIP }}
{%- endif %}
{%- if Values.kubeStateMetrics.service.externalIPs %}
  externalIPs:
{{ toYaml(Values.kubeStateMetrics.service.externalIPs) | indent(4) }}
{%- endif %}
{%- if Values.kubeStateMetrics.service.loadBalancerIP %}
  loadBalancerIP: {{ Values.kubeStateMetrics.service.loadBalancerIP }}
{%- endif %}
{%- if Values.kubeStateMetrics.service.loadBalancerSourceRanges %}
  loadBalancerSourceRanges:
  {%- for cidr in Values.kubeStateMetrics.service.loadBalancerSourceRanges %}
    - {{ cidr }}
  {%- endfor %}
{%- endif %}
  ports:
    - name: http
      port: {{ Values.kubeStateMetrics.service.servicePort }}
      protocol: TCP
      targetPort: 8080
  selector:
    app: {{ self.prometheus__name() }}
    component: "{{ Values.kubeStateMetrics.name }}"
    release: {{ Release.Name }}
  type: "{{ Values.kubeStateMetrics.service.type }}"
{%- endif %}
#---{%- if Values.nodeExporter.enabled -%}
apiVersion: v1
kind: Service
metadata:
{%- if Values.nodeExporter.service.annotations %}
  annotations:
{{ toYaml(Values.nodeExporter.service.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.nodeExporter.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
{%- if Values.nodeExporter.service.labels %}
{{ toYaml(Values.nodeExporter.service.labels) | indent(4) }}
{%- endif %}
  name: {{ self.prometheus__nodeExporter__fullname() }}
spec:
{%- if Values.nodeExporter.service.clusterIP %}
  clusterIP: {{ Values.nodeExporter.service.clusterIP }}
{%- endif %}
{%- if Values.nodeExporter.service.externalIPs %}
  externalIPs:
{{ toYaml(Values.nodeExporter.service.externalIPs) | indent(4) }}
{%- endif %}
{%- if Values.nodeExporter.service.loadBalancerIP %}
  loadBalancerIP: {{ Values.nodeExporter.service.loadBalancerIP }}
{%- endif %}
{%- if Values.nodeExporter.service.loadBalancerSourceRanges %}
  loadBalancerSourceRanges:
  {%- for cidr in Values.nodeExporter.service.loadBalancerSourceRanges %}
    - {{ cidr }}
  {%- endfor %}
{%- endif %}
  ports:
    - name: metrics
      port: {{ Values.nodeExporter.service.servicePort }}
      protocol: TCP
      targetPort: 9100
  selector:
    app: {{ self.prometheus__name() }}
    component: "{{ Values.nodeExporter.name }}"
    release: {{ Release.Name }}
  type: "{{ Values.nodeExporter.service.type }}"
{%- endif -%}
#---{%- if Values.pushgateway.enabled -%}
apiVersion: v1
kind: Service
metadata:
{%- if Values.pushgateway.service.annotations %}
  annotations:
{{ toYaml(Values.pushgateway.service.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.pushgateway.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
{%- if Values.pushgateway.service.labels %}
{{ toYaml(Values.pushgateway.service.labels) | indent(4) }}
{%- endif %}
  name: {{ self.prometheus__pushgateway__fullname() }}
spec:
{%- if Values.pushgateway.service.clusterIP %}
  clusterIP: {{ Values.pushgateway.service.clusterIP }}
{%- endif %}
{%- if Values.pushgateway.service.externalIPs %}
  externalIPs:
{{ toYaml(Values.pushgateway.service.externalIPs) | indent(4) }}
{%- endif %}
{%- if Values.pushgateway.service.loadBalancerIP %}
  loadBalancerIP: {{ Values.pushgateway.service.loadBalancerIP }}
{%- endif %}
{%- if Values.pushgateway.service.loadBalancerSourceRanges %}
  loadBalancerSourceRanges:
  {%- for cidr in Values.pushgateway.service.loadBalancerSourceRanges %}
    - {{ cidr }}
  {%- endfor %}
{%- endif %}
  ports:
    - name: http
      port: {{ Values.pushgateway.service.servicePort }}
      protocol: TCP
      targetPort: 9091
  selector:
    app: {{ self.prometheus__name() }}
    component: "{{ Values.pushgateway.name }}"
    release: {{ Release.Name }}
  type: "{{ Values.pushgateway.service.type }}"
{%- endif %}
#---apiVersion: v1
kind: Service
metadata:
{%- if Values.server.service.annotations %}
  annotations:
{{ toYaml(Values.server.service.annotations) | indent(4) }}
{%- endif %}
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
{%- if Values.server.service.labels %}
{{ toYaml(Values.server.service.labels) | indent(4) }}
{%- endif %}
  name: {{ self.prometheus__server__fullname() }}
spec:
{%- if Values.server.service.clusterIP %}
  clusterIP: {{ Values.server.service.clusterIP }}
{%- endif %}
{%- if Values.server.service.externalIPs %}
  externalIPs:
{{ toYaml(Values.server.service.externalIPs) | indent(4) }}
{%- endif %}
{%- if Values.server.service.loadBalancerIP %}
  loadBalancerIP: {{ Values.server.service.loadBalancerIP }}
{%- endif %}
{%- if Values.server.service.loadBalancerSourceRanges %}
  loadBalancerSourceRanges:
  {%- for cidr in Values.server.service.loadBalancerSourceRanges %}
    - {{ cidr }}
  {%- endfor %}
{%- endif %}
  ports:
    - name: http
      port: {{ Values.server.service.servicePort }}
      protocol: TCP
      targetPort: 9090
    {%- if Values.server.service.nodePort %}
      nodePort: {{ Values.server.service.nodePort }}
    {%- endif %}
  selector:
    app: {{ self.prometheus__name() }}
    component: "{{ Values.server.name }}"
    release: {{ Release.Name }}
  type: "{{ Values.server.service.type }}"
#---{%- if Values.alertmanager.enabled -%}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.alertmanager.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__alertmanager__fullname() }}
spec:
  replicas: {{ Values.alertmanager.replicaCount }}
  {%- if Values.server.strategy %}
  strategy:
{{ toYaml(Values.server.strategy) | indent(4) }}
  {%- endif %}
  template:
    metadata:
    {%- if Values.alertmanager.podAnnotations %}
      annotations:
{{ toYaml(Values.alertmanager.podAnnotations) | indent(8) }}
    {%- endif %}
      labels:
        app: {{ self.prometheus__name() }}
        component: "{{ Values.alertmanager.name }}"
        release: {{ Release.Name }}
    spec:
      serviceAccountName: {%- if Values.rbac.create %}{{ self.prometheus__alertmanager__fullname() }}{%- else %}"{{ Values.alertmanager.serviceAccountName }}"{%- endif %}
      containers:
        - name: {{ self.prometheus__name() }}-{{ Values.alertmanager.name }}
          image: "{{ Values.alertmanager.image.repository }}:{{ Values.alertmanager.image.tag }}"
          imagePullPolicy: "{{ Values.alertmanager.image.pullPolicy }}"
          env:
            {%- for key, value in Values.alertmanager.extraEnv.iteritems() %}
            - name: {{ key }}
              value: {{ value }}
            {%- endfor %}
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path={{ Values.alertmanager.persistentVolume.mountPath }}
          {%- for key, value in Values.alertmanager.extraArgs.iteritems() %}
            - --{{ key }}={{ value }}
          {%- endfor %}
          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: {{ Values.alertmanager.baseURL }}/#/status
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
{{ toYaml(Values.alertmanager.resources) | indent(12) }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: "{{ Values.alertmanager.persistentVolume.mountPath }}"
              subPath: "{{ Values.alertmanager.persistentVolume.subPath }}"

        - name: {{ self.prometheus__name() }}-{{ Values.alertmanager.name }}-{{ Values.configmapReload.name }}
          image: "{{ Values.configmapReload.image.repository }}:{{ Values.configmapReload.image.tag }}"
          imagePullPolicy: "{{ Values.configmapReload.image.pullPolicy }}"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9093{{ Values.alertmanager.baseURL }}/-/reload
          resources:
{{ toYaml(Values.configmapReload.resources) | indent(12) }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
    {%- if Values.alertmanager.nodeSelector %}
      nodeSelector:
{{ toYaml(Values.alertmanager.nodeSelector) | indent(8) }}
    {%- endif %}
      volumes:
        - name: config-volume
          configMap:
            name: {%- if Values.alertmanager.configMapOverrideName %}{{ Release.Name }}-{{ Values.alertmanager.configMapOverrideName }}{%- else %}{{ self.prometheus__alertmanager__fullname() }}{%- endif %}
        - name: storage-volume
        {%- if Values.alertmanager.persistentVolume.enabled %}
          persistentVolumeClaim:
            claimName: {%- if Values.alertmanager.persistentVolume.existingClaim %}{{ Values.alertmanager.persistentVolume.existingClaim }}{%- else %}{{ self.prometheus__alertmanager__fullname() }}{%- endif %}
        {%- else %}
          emptyDir: {}
        {%- endif -%}
{%- endif %}
#---{%- if Values.kubeStateMetrics.enabled -%}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.kubeStateMetrics.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__kubeStateMetrics__fullname() }}
spec:
  replicas: {{ Values.kubeStateMetrics.replicaCount }}
  template:
    metadata:
    {%- if Values.kubeStateMetrics.podAnnotations %}
      annotations:
{{ toYaml(Values.kubeStateMetrics.podAnnotations) | indent(8) }}
    {%- endif %}
      labels:
        app: {{ self.prometheus__name() }}
        component: "{{ Values.kubeStateMetrics.name }}"
        release: {{ Release.Name }}
    spec:
      serviceAccountName: {%- if Values.rbac.create %}{{ self.prometheus__kubeStateMetrics__fullname() }}{%- else %}"{{ Values.kubeStateMetrics.serviceAccountName }}"{%- endif %}
      containers:
        - name: {{ self.prometheus__name() }}-{{ Values.kubeStateMetrics.name }}
          image: "{{ Values.kubeStateMetrics.image.repository }}:{{ Values.kubeStateMetrics.image.tag }}"
          imagePullPolicy: "{{ Values.kubeStateMetrics.image.pullPolicy }}"
          ports:
            - name: metrics
              containerPort: 8080
          resources:
{{ toYaml(Values.kubeStateMetrics.resources) | indent(12) }}
    {%- if Values.kubeStateMetrics.nodeSelector %}
      nodeSelector:
{{ toYaml(Values.kubeStateMetrics.nodeSelector) | indent(8) }}
    {%- endif %}
{%- endif %}
#---{%- if Values.pushgateway.enabled -%}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.pushgateway.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__pushgateway__fullname() }}
spec:
  replicas: {{ Values.pushgateway.replicaCount }}
  template:
    metadata:
    {%- if Values.pushgateway.podAnnotations %}
      annotations:
{{ toYaml(Values.pushgateway.podAnnotations) | indent(8) }}
    {%- endif %}
      labels:
        app: {{ self.prometheus__name() }}
        component: "{{ Values.pushgateway.name }}"
        release: {{ Release.Name }}
    spec:
      containers:
        - name: {{ self.prometheus__name() }}-{{ Values.pushgateway.name }}
          image: "{{ Values.pushgateway.image.repository }}:{{ Values.pushgateway.image.tag }}"
          imagePullPolicy: "{{ Values.pushgateway.image.pullPolicy }}"
          args:
          {%- for key, value in Values.pushgateway.extraArgs.iteritems() %}
            - --{{ key }}={{ value }}
          {%- endfor %}
          ports:
            - containerPort: 9091
          readinessProbe:
            httpGet:
              path: /#/status
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
{{ toYaml(Values.pushgateway.resources) | indent(12) }}
    {%- if Values.pushgateway.nodeSelector %}
      nodeSelector:
{{ toYaml(Values.pushgateway.nodeSelector) | indent(8) }}
    {%- endif %}
{%- endif %}
#---apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ self.prometheus__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version }}
    component: "{{ Values.server.name }}"
    heritage: {{ Release.Service }}
    release: {{ Release.Name }}
  name: {{ self.prometheus__server__fullname() }}
spec:
  replicas: {{ Values.server.replicaCount }}
  {%- if Values.server.strategy %}
  strategy:
{{ toYaml(Values.server.strategy) | indent(4) }}
  {%- endif %}
  template:
    metadata:
    {%- if Values.server.podAnnotations %}
      annotations:
{{ toYaml(Values.server.podAnnotations) | indent(8) }}
    {%- endif %}
      labels:
        app: {{ self.prometheus__name() }}
        component: "{{ Values.server.name }}"
        release: {{ Release.Name }}
    spec:
      serviceAccountName: {%- if Values.rbac.create %}{{ self.prometheus__server__fullname() }}{%- else %}"{{ Values.server.serviceAccountName }}"{%- endif %}
      containers:
        - name: {{ self.prometheus__name() }}-{{ Values.server.name }}-{{ Values.configmapReload.name }}
          image: "{{ Values.configmapReload.image.repository }}:{{ Values.configmapReload.image.tag }}"
          imagePullPolicy: "{{ Values.configmapReload.image.pullPolicy }}"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9090{{ Values.server.baseURL }}/-/reload
          resources:
{{ toYaml(Values.configmapReload.resources) | indent(12) }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: {{ self.prometheus__name() }}-{{ Values.server.name }}
          image: "{{ Values.server.image.repository }}:{{ Values.server.image.tag }}"
          imagePullPolicy: "{{ Values.server.image.pullPolicy }}"
          args:
          {%- if Values.alertmanager.enabled or Values.server.alertmanagerURL %}
            - --alertmanager.url={%- if Values.alertmanager.enabled %}http://{{ self.prometheus__alertmanager__fullname() }}:{{ Values.alertmanager.service.servicePort }}{{ Values.alertmanager.baseURL }}{%- else %}{{ Values.server.alertmanagerURL }}{%- endif %}
          {%- endif %}
          {%- if Values.server.retention %}
            - --storage.local.retention = {{ Values.server.retention }}
          {%- endif %}
            - --config.file=/etc/config/prometheus.yml
            - --storage.local.path={{ Values.server.persistentVolume.mountPath }}
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
          {%- for key, value in Values.server.extraArgs.iteritems() %}
            - --{{ key }}={{ value }}
          {%- endfor %}
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: {{ Values.server.baseURL }}/status
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
{{ toYaml(Values.server.resources) | indent(12) }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: {{ Values.alertmanager.persistentVolume.mountPath }}
              subPath: "{{ Values.server.persistentVolume.subPath }}"
          {%- for item in Values.server.extraHostPathMounts %}
            - name: {{ item.name }}
              mountPath: {{ item.mountPath }}
              readOnly: {{ item.readOnly }}
          {%- endfor %}
    {%- if Values.server.nodeSelector %}
      nodeSelector:
{{ toYaml(Values.server.nodeSelector) | indent(8) }}
    {%- endif %}
    {%- if Values.server.tolerations %}
      tolerations:
{{ toYaml(Values.server.tolerations) | indent(8) }}
    {%- endif %}
      terminationGracePeriodSeconds: {{ Values.server.terminationGracePeriodSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: {%- if Values.server.configMapOverrideName %}{{ Release.Name }}-{{ Values.server.configMapOverrideName }}{%- else %}{{ self.prometheus__server__fullname() }}{%- endif %}
        - name: storage-volume
        {%- if Values.server.persistentVolume.enabled %}
          persistentVolumeClaim:
            claimName: {%- if Values.server.persistentVolume.existingClaim %}{{ Values.server.persistentVolume.existingClaim }}{%- else %}{{ self.prometheus__server__fullname() }}{%- endif %}
        {%- else %}
          emptyDir: {}
        {%- endif -%}
      {%- for item in Values.server.extraHostPathMounts %}
        - name: {{ item.name }}
          hostPath:
            path: {{ item.hostPath }}
      {%- endfor %}
