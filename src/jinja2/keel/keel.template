{%- if Values.webhookRelay.enabled %}
apiVersion: v1
kind: Secret
metadata:
  name: {{ self.keel__fullname() }}-webhookrelay
  namespace: kube-system
  labels:
    app: {{ self.keel__name() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
type: Opaque
data:
  key: {{ Values.webhookRelay.key | b64enc() }}
  secret:  {{ Values.webhookRelay.secret | b64enc() }}
{%- endif %}
#---apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ self.keel__fullname() }}
  namespace: kube-system
  labels:
    app: {{ self.keel__name() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
#---{%- if Values.service.enabled %}
apiVersion: v1
kind: Service
metadata:
  name: {{ self.keel__fullname() }}
  namespace: kube-system
  labels:
    app: {{ self.keel__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version | replace("+","_") }}
    release: {{ Release.Name }}
    heritage: {{ Release.Service }}
spec:
  type: {{ Values.service.type }}
  ports:
    - port: {{ Values.service.externalPort }}
      targetPort: 9300
      protocol: TCP
      name: keel
  selector:
    app: {{ self.keel__name() }}
    release: {{ Release.Name }}
  sessionAffinity: None
{%- endif %}
#---apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ self.keel__fullname() }}
  namespace: kube-system
  labels:
    app: {{ self.keel__name() }}
    chart: {{ Chart.Name }}-{{ Chart.Version | replace("+","_") }}
    release: {{ Release.Name }}
    heritage: {{ Release.Service }}
  annotations:
    kubernetes.io/service-account.name: keel
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ self.keel__name() }}
        release: {{ Release.Name }}
    spec:
      containers:
        - name: keel
          image: "{{ Values.image.repository }}:{{ Values.image.tag }}"
          imagePullPolicy: {{ Values.image.pullPolicy }}
          command: ["/bin/keel"]
          env:
{%- if Values.polling.enabled %}
            # Enable polling
            - name: POLL
              value: "1"
{%- else %}
            # Disable polling
            - name: POLL
              value: "0"
{%- endif %}
{%- if Values.helmProvider.enabled %}
            # Enable/disable Helm provider
            - name: HELM_PROVIDER
              value: "1"
{%- endif %}
{%- if Values.gcr.enabled %}
            # Enable GCR with pub/sub support
            - name: PROJECT_ID
              value: "{{ Values.gcr.projectId }}"
            - name: PUBSUB
              value: "1"
{%- endif %}
{%- if Values.webhook.enabled %}
            # Enable webhook endpoint
            - name: WEBHOOK_ENDPOINT
              value: "{{ Values.webhook.endpoint }}"
{%- endif %}
{%- if Values.slack.enabled %}
            - name: SLACK_TOKEN
              value: "{{ Values.slack.token }}"
            - name: SLACK_CHANNELS
              value: "{{ Values.slack.channel }}"
{%- endif %}
          ports:
            - containerPort: 9300
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9300
            initialDelaySeconds: 30
            timeoutSeconds: 10
          resources:
{{ toYaml(Values.resources) | indent(12) }}
{%- if Values.webhookRelay.enabled %}
        - name: webhookrelayd
          image: "{{ Values.webhookRelay.image.repository }}:{{ Values.webhookRelay.image.tag }}"
          imagePullPolicy: {{ Values.webhookRelay.image.pullPolicy }}
          command: ["/webhookrelayd"]
          env:
            - name: KEY
              valueFrom:
                secretKeyRef:
                  name: {{ self.keel__fullname() }}-webhookrelay
                  key: key
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ self.keel__fullname() }}-webhookrelay
                  key: secret
            - name: BUCKET
              value: "{{ Values.webhookRelay.bucket }}"
          resources:
{{ toYaml(Values.resources) | indent(12) }}
{%- endif %}
      nodeSelector:
{{ toYaml(Values.nodeSelector) | indent(8) }}
