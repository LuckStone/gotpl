apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ self.jenkins__fullname() }}
  labels:
    heritage: {{ Release.Service | quote() }}
    release: {{ Release.Name | quote() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    component: "{{ Release.Name }}-{{ Values.Master.Name }}"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      component: "{{ Release.Name }}-{{ Values.Master.Component }}"
  template:
    metadata:
      labels:
        app: {{ self.jenkins__fullname() }}
        heritage: {{ Release.Service | quote() }}
        release: {{ Release.Name | quote() }}
        chart: "{{ Chart.Name }}-{{ Chart.Version }}"
        component: "{{ Release.Name }}-{{ Values.Master.Component }}"
      annotations:
        checksum/config: ""
    spec:
      {%- if Values.Master.NodeSelector %}
      nodeSelector:
{{ toYaml(Values.Master.NodeSelector) | indent(8) }}
      {%- endif %}
      {%- if Values.Master.Tolerations %}
      tolerations:
{{ toYaml(Values.Master.Tolerations) | indent(8) }}
      {%- endif %}
      securityContext:
        runAsUser: 0
      serviceAccountName: {%- if Values.rbac.install %}{{ self.jenkins__fullname() }}{%- else %}"{{ Values.rbac.serviceAccountName }}"{%- endif %}
      initContainers:
        - name: "copy-default-config"
          image: "{{ Values.Master.Image }}:{{ Values.Master.ImageTag }}"
          imagePullPolicy: "{{ Values.Master.ImagePullPolicy }}"
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          volumeMounts:
            -
              mountPath: /var/jenkins_home
              name: jenkins-home
            -
              mountPath: /var/jenkins_config
              name: jenkins-config
            -
              mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
            -
              mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
      containers:
        - name: {{ self.jenkins__fullname() }}
          image: "{{ Values.Master.Image }}:{{ Values.Master.ImageTag }}"
          imagePullPolicy: "{{ Values.Master.ImagePullPolicy }}"
          {%- if Values.Master.UseSecurity %}
          args: [ "--argumentsRealm.passwd.$(ADMIN_USER)=$(ADMIN_PASSWORD)",  "--argumentsRealm.roles.$(ADMIN_USER)=admin"]
          {%- endif %}
          env:
            - name: JAVA_OPTS
              value: "{{ Values.Master.JavaOpts | default("", true) }}"
            - name: JENKINS_OPTS
              value: "{%- if Values.Master.JenkinsUriPrefix %}--prefix={{ Values.Master.JenkinsUriPrefix }} {%- endif %}{{ Values.Master.JenkinsOpts | default("", true) }}"
            {%- if Values.Master.UseSecurity %}
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ self.jenkins__fullname() }}
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ self.jenkins__fullname() }}
                  key: jenkins-admin-user
            {%- endif %}
          ports:
            - containerPort: {{ Values.Master.ContainerPort }}
              name: http
            - containerPort: {{ Values.Master.SlaveListenerPort }}
              name: slavelistener
            {%- if Values.Master.JMXPort %}
            - containerPort: {{ Values.Master.JMXPort }}
              name: jmx
            {%- endif %}
          resources:
            requests:
              cpu: "{{ Values.Master.Cpu }}"
              memory: "{{ Values.Master.Memory }}"
          volumeMounts:
{%- if Values.Persistence.mounts %}
{{ toYaml(Values.Persistence.mounts) | indent(12) }}
{%- endif %}
            -
              mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            -
              mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            -
              mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            -
              mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
              readOnly: false
      volumes:
{%- if Values.Persistence.volumes %}
{{ toYaml(Values.Persistence.volumes) | indent(6) }}
{%- endif %}
      - name: jenkins-config
        configMap:
          name: {{ self.jenkins__fullname() }}
      - name: plugin-dir
        emptyDir: {}
      - name: secrets-dir
        emptyDir: {}
      - name: jenkins-home
      {%- if Values.Persistence.Enabled %}
        persistentVolumeClaim:
          claimName: {{ Values.Persistence.ExistingClaim | default  (self.jenkins__fullname()) }}
      {%- else %}
        emptyDir: {}
      {%- endif -%}
