{%- if Values.mode=="distributed" %}
{%- set nodeCount = Values.replicas | rangein() %}
apiVersion: v1
kind: Service
metadata:
  name: {{ self.minio__fullname() }}
  labels:
    app: {{ self.minio__fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
spec:
  clusterIP: None
  ports:
    - name: service
      port: 9000
      targetPort: {{ Values.servicePort }}
      protocol: TCP
  selector:
    app: {{ self.minio__fullname() }}
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ self.minio__fullname() }}
  labels:
    app: {{ self.minio__fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
spec:
  serviceName: {{ self.minio__fullname() }}
  replicas: {{ Values.replicas }}
  selector:
    matchLabels:
      app: {{ self.minio__fullname() }}
  template:
    metadata:
      name: {{ self.minio__fullname() }}
      labels:
        app: {{ self.minio__fullname() }}
        chart: "{{ Chart.Name }}-{{ Chart.Version }}"
        release: "{{ Release.Name }}"
        heritage: "{{ Release.Service }}"
    spec:
      volumes:
        - name: minio-user
          secret:
            secretName: {{ self.minio__fullname() }}-user
        - name: minio-server-config
          configMap:
            name: {{ self.minio__fullname() }}-config-cm
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
      containers:
        - name: minio
          image: {{ Values.image }}:{{ Values.imageTag }}
          imagePullPolicy: {{ Values.imagePullPolicy }}
          {%- if Values.configPath %}
          args:
            - -C {{ Values.configPath }} server
          {%- else %}
          args:
            - server
            {%- for item in nodeCount %}
            - http://{{ self.minio__fullname() }}-{{ item }}.{{ self.minio__fullname() }}.{{ Release.Namespace }}.svc.cluster.local{{ Values.mountPath }}
            {%- endfor %}
            {%- endif %}
          volumeMounts:
            - name: export
              mountPath: {{ Values.mountPath }}
            - name: minio-server-config
              mountPath: {{ Values.configPath | default("/root/.minio/", true) | quote() }}
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ self.minio__fullname() }}-user
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ self.minio__fullname() }}-user
                  key: secretkey
          resources:
{{ toYaml(Values.resources) | indent(12) }}
  volumeClaimTemplates:
    - metadata:
        name: export
        annotations:
          {%- if Values.persistence.storageClass %}
          volume.beta.kubernetes.io/storage-class: {{ Values.persistence.storageClass }}
          {%- else %}
          volume.alpha.kubernetes.io/storage-class: default
          {%- endif %}
      spec:
        accessModes: [ {{ Values.persistence.accessMode | quote() }} ]
        resources:
          requests:
            storage: {{ Values.persistence.size }}
  {%- endif %}
