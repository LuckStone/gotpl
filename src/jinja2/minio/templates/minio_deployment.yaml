{%- if Values.mode=="standalone"=="shared" %}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ self.minio__fullname() }}
  labels:
    app: {{ self.minio__fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
spec:
  {%- if Values.mode=="shared" %}
  replicas: {{ Values.replicas }}
  {%- endif %}
  selector:
    matchLabels:
      app: {{ self.minio__fullname() }}
  template:
    metadata:
      name: {{ self.minio__fullname() }}
      labels:
        app: {{ self.minio__fullname() }}
        chart: "{{ Chart.Name }}-{{ Chart.Version }}"
        release: "{{ Release.Name }}"
        heritage: "{{ Release.Service }}"
    spec:
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
        - name: export
        {%- if Values.persistence.enabled %}
          persistentVolumeClaim:
            claimName: {{ self.minio__fullname() }}
        {%- else %}
          emptyDir: {}
        {%- endif %}
        - name: minio-server-config
          configMap:
            name: {{ self.minio__fullname() }}-config-cm
        - name: minio-user
          secret:
            secretName: {{ self.minio__fullname() }}-user
      containers:
        - name: minio
          image: {{ Values.image }}:{{ Values.imageTag }}
          imagePullPolicy: {{ Values.imagePullPolicy }}
          {%- if Values.configPath %}
          args: ["-C", "{{ Values.configPath }}", "server", "{{ Values.mountPath }}"]
          {%- else %}
          args: ["server", "{{ Values.mountPath }}"]
          {%- endif %}
          volumeMounts:
            - name: export
              mountPath: {{ Values.mountPath }}
            - name: minio-server-config
              mountPath: {{ Values.configPath | default("/root/.minio/", true) | quote() }}
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ self.minio__fullname() }}-user
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ self.minio__fullname() }}-user
                  key: secretkey
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
{{ toYaml(Values.resources) | indent(12) }}
{%- endif %}
