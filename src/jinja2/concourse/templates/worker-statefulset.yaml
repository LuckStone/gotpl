apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ self.concourse__worker__fullname() }}
  labels:
    app: {{ self.concourse__worker__fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"

spec:
  serviceName: {{ self.concourse__worker__fullname() }}
  replicas: {{ Values.worker.replicas }}
  template:
    metadata:
      labels:
        app: {{ self.concourse__worker__fullname() }}
      annotations:
        {%- for key, value in Values.worker.annotations.iteritems() %}
        {{ key }}: {{ value | quote() }}
        {%- endfor %}
    spec:
      terminationGracePeriodSeconds: {{ Values.worker.terminationGracePeriodSeconds }}
      containers:
        - name: {{ self.concourse__worker__fullname() }}
          image: "{{ Values.image }}:{{ Values.imageTag }}"
          imagePullPolicy: {{ Values.imagePullPolicy | default("", true) | quote() }}
          command:
            - /bin/sh
          args:
            - -c
            - |-
              cp /dev/null /concourse-work-dir/.liveness_probe
              concourse worker --name=${HOSTNAME} | tee -a /concourse-work-dir/.liveness_probe
              sleep ${POST_STOP_DELAY_SECONDS}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |-
                  FATAL_ERRORS=$( echo "${LIVENESS_PROBE_FATAL_ERRORS}" | grep -q '\S' && \
                      grep -F "${LIVENESS_PROBE_FATAL_ERRORS}" /concourse-work-dir/.liveness_probe )
                  cp /dev/null /concourse-work-dir/.liveness_probe
                  if [ ! -z "${FATAL_ERRORS}" ]; then
                    >&2 echo "Fatal error detected: ${FATAL_ERRORS}"
                    exit 1
                  fi
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - "concourse retire-worker --name=${HOSTNAME}"
          env:
            - name: CONCOURSE_TSA_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: concourse-tsa-host
            - name: CONCOURSE_TSA_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: concourse-tsa-port
            - name: CONCOURSE_GARDEN_DOCKER_REGISTRY
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: garden-docker-registry
            - name: CONCOURSE_GARDEN_INSECURE_DOCKER_REGISTRY
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: garden-insecure-docker-registry
            - name: CONCOURSE_TSA_PUBLIC_KEY
              value: "/concourse-keys/host_key.pub"
            - name: CONCOURSE_TSA_WORKER_PRIVATE_KEY
              value: "/concourse-keys/worker_key"
            - name: CONCOURSE_WORK_DIR
              value: "/concourse-work-dir"
            - name: CONCOURSE_BAGGAGECLAIM_DRIVER
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: concourse-baggageclaim-driver
            - name: POST_STOP_DELAY_SECONDS
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: worker-post-stop-delay-seconds
            - name: LIVENESS_PROBE_FATAL_ERRORS
              valueFrom:
                configMapKeyRef:
                  name: {{ self.concourse__concourse__fullname() }}
                  key: worker-fatal-errors
          resources:
{{ toYaml(Values.worker.resources) | indent(12) }}
          securityContext:
            privileged: true
          volumeMounts:
            - name: concourse-keys
              mountPath: /concourse-keys
              readOnly: true
            - name: concourse-work-dir
              mountPath: /concourse-work-dir
      affinity:
{%- if Values.worker.additionalAffinities %}
{{ toYaml(Values.worker.additionalAffinities) | indent(8) }}
{%- endif %}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ self.concourse__worker__fullname() }}
                  release: {{ Release.Name | quote() }}
      volumes:
        - name: concourse-keys
          secret:
            secretName: {{ self.concourse__concourse__fullname() }}
            defaultMode: 0400
            items:
              - key: host-key-pub
                path: host_key.pub
              - key: worker-key
                path: worker_key
              - key: worker-key-pub
                path: worker_key.pub
  {%- if Values.persistence.enabled %}
  volumeClaimTemplates:
    - metadata:
        name: concourse-work-dir
      spec:
        accessModes:
          - {{ Values.persistence.worker.accessMode | quote() }}
        resources:
          requests:
            storage: {{ Values.persistence.worker.size | quote() }}
      {%- if Values.persistence.worker.storageClass %}
      {%- if ("-"==Values.persistence.worker.storageClass) %}
        storageClassName: ""
      {%- else %}
        storageClassName: "{{ Values.persistence.worker.storageClass }}"
      {%- endif %}
      {%- endif %}
  {%- else %}
        - name: concourse-work-dir
          emptyDir: {}
  {%- endif %}
