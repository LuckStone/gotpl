
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-concourse
  labels:
    app: test-concourse
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"
data:
  postgresql-host: test-postgresql
  postgresql-database: "concourse"
  concourse-atc-port: "8080"
  concourse-tsa-host: test-web
  concourse-tsa-port: "2222"
  concourse-allow-self-signed-certificates: "False"
  concourse-auth-duration: "24h"
  concourse-resource-checking-interval: "1m"
  concourse-old-resource-grace-period: "5m"
  concourse-resource-cache-cleanup-interval: "30s"
  concourse-external-url: ""
  concourse-baggageclaim-driver: "naive"
  garden-docker-registry: ""
  garden-insecure-docker-registry: ""
  github-auth-organization: ""
  github-auth-team: ""
  github-auth-user: ""
  github-auth-auth-url: ""
  github-auth-token-url: ""
  github-auth-api-url: ""
  gitlab-auth-group: ""
  gitlab-auth-auth-url: ""
  gitlab-auth-token-url: ""
  gitlab-auth-api-url: ""
  generic-oauth-display-name: ""
  generic-oauth-auth-url: ""
  generic-oauth-auth-url-param: ""
  generic-oauth-scope: ""
  generic-oauth-token-url: ""
  worker-post-stop-delay-seconds: "60"
  worker-fatal-errors: "guardian.api.garden-server.create.failed
unknown handle"
  

---

apiVersion: v1
kind: Secret
metadata:
  name: test-concourse
  labels:
    app: test-concourse
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"
type: Opaque
data:
  postgresql-user: "Y29uY291cnNl"
  basic-auth-username: "Y29uY291cnNl"
  basic-auth-password: "Y29uY291cnNl"
  host-key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMkFVUFh4dWlE
Qy9xckJXaklkVDVmdk5jTWxNRVlwUjNYNFNMUUlnTEMxVUxEc0NPCmZsZUtaK1dpNFJ6d2JrVUtp
S21KbTVHZXlOVlZDRGRmdmREMVNkMSs1ZmFxbXAyL09RQnpMUzdvOE5ZL2J0TXcKOGg5bHg0S1ZK
YUpKMUVNMUVpeUdZNDFOeDU5MUtQMTRwQmZyMC9OZE9JckR1Mkp2RjZlN0NIRWJyemtONTdrYgpC
VlFrYUlNYVMwMVJ3LzVPZTY4R0ZhbGxpMmlpOEw4ZE5XVlZ6cXVCaDVQd1ZXaW12VGd3djNUWUcy
VEg4TDFWClY3bisvelJScGtqTWwyK1BVb3VHcUQrQnArNHdGK2hwNEFXNXYyNENxanRMSkVNdjRJ
RUp2MkZSZnJPYXVCSVoKWGpBUzFTU2c5VmFUT1MzaXd4YVlydjh1RzFYZk1GSElDdmtFUFFJREFR
QUJBb0lCQUc4N1c4anJYNnZLMkptMwpvb0ovT2VGbXltaVhXc0N3RmkrMi9rVkNSLzJUMHRmTHl4
Ty9XK05YMldEMUY5Q1ArSGFhWmVNWFBwM0hTN3VwClY4RlQ0Wm9oVllCd1hUUzBXWXl1Y0tBcGNZ
VGhyVlFScHpobGRuRWZDbEdRbVZlVks3U3AvS0V5VjRTYzFTVkEKTDJpL2NJMTQyTjJPaG03c3Bx
dVZrTGN1RnNWSU56WjBmWEN2MjVkVHFia0VnalRKek5kQnp5Rlh2YzR6ME10OQpnVzE0TTdteitZ
S1lPZnNDeElFbTQzOGZDOWIxNkM5NnlJRkJkTisvamFQOHBtYjJSb0lFMkQwRjhiajVLMWhSCll5
R0ZLTU9VNGU2Y1lxNTlpV2Z1Ykt1dTJXTkpFQmsvNWFPN3g3WHUyUzBrOHdJWWx3eEZ1dTRMZlIy
S3ZpenUKK21GVmYza0NnWUVBOWUwKzQwdEpHcE9QTThoQUIzRHdYalljOGxDdXlZZjN6MzBUM1Jx
Vk5DVVZTV25sYWovcwozRU5pNitOZzN1K1pzOGNSMkNGb3UrakFDbFR5V0x1U25JOXlBQ0QwZXlX
OW40YnpZTVViZ2RDNnZuZUxqcHp4CndXUjlYdjVSbVpWbHk3eFd1cWNnRWVFZjhSTmNZSTNvWGJ5
MGxhRjNFT2J2dUF4LzRFVElrRmNDZ1lFQTRONDIKdzFVRVdHb3BXQklJWFlIa0VQSFF1RjBTeFIy
Q1p5aDlFeFRlU3hGcGh5aWJrY0hSakRXK3Q5MVpMblNtNWsxTgpUT2RZdWMwQXBCVjNVK1RleGVG
dkRJOTRML096ZTZIdDVNYXRSUXo4a1J3TUZHSkwzVHJwYmdUbVdkZkcwNUFkCm9pU2NKendZMTZv
SlhuS3VzeGlrN1YrZ0NDTk5FMC8yVXVNblk0c0NnWUFFZjgycHZPUGVmNXFjR09ySytBNzkKdWtH
M1VUQ1JjVkpnVW1wOW5oSGl2VmJ4VytXZGx3UFBWOUJFZm9sMEtyQUdNUHNybUJqaGJ6V3NPcmVn
VmZZdAp0UlloMkhpQWxFVXUyUG8wNkFaRHpyekw1VVlCV3UrMVdSQk9INXNBazFJa2N4S25JWTJk
cGgrK2Vsc3pUUVZXClNiQ0lHRWNrWVFVN3VjYlJKSkVDeXdLQmdCYjR2SEZ4OHZLeFRhM3drYWd6
eDcrdlpGb2hML1N4RWd4Rng1azIKYllzUHFVOGtaOWdaQzdZZUczQ2ZEU2hBeEhnTWQ1UWVvaUxB
L1lyRm9wNFFhRzJnblA2VWZYdXdrcXBUbllEYwpod0RoMWI5aE5SNno5L29PdGFBR29oMlZmSHRL
WXF5WXZ0Y0hQYVp5ZVdpTG9Lc3RIbFFkaTdTcEhvdVZoSjF0CkZTNEhBb0dBR3krNTYrenZkUk9q
Snk5QTJNbi80QnZXcnN1NFJTUUlMQko2SGI0VHBGNDZwMmZuMHJ3cXloT2oKT2Njcyt4a2RFc0k5
dzVwaFh6SUVlT3EyTHF2V0hEUHh0ZExweE9ycm14NEFmdEFXZE04UzErT3FUcHpIaWhLMQp5MVpP
cldmdk9OK1hqV0ZGQUVlai9DcFFaa05Va1R6alR0U0MwZG5mQXZlWmxhc1FIZEk9Ci0tLS0tRU5E
IFJTQSBQUklWQVRFIEtFWS0tLS0t"
  host-key-pub: "c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFEWUJROWZHNklNTCtxc0ZhTWgx
UGwrODF3eVV3UmlsSGRmaEl0QWlBc0xWUXNPd0k1K1Y0cG41YUxoSFBCdVJRcUlxWW1ia1o3STFW
VUlOMSs5MFBWSjNYN2w5cXFhbmI4NUFITXRMdWp3MWo5dTB6RHlIMlhIZ3BVbG9rblVRelVTTEla
ampVM0huM1VvL1hpa0YrdlQ4MTA0aXNPN1ltOFhwN3NJY1J1dk9RM251UnNGVkNSb2d4cExUVkhE
L2s1N3J3WVZxV1dMYUtMd3Z4MDFaVlhPcTRHSGsvQlZhS2E5T0RDL2ROZ2JaTWZ3dlZWWHVmNy9O
RkdtU015WGI0OVNpNGFvUDRHbjdqQVg2R25nQmJtL2JnS3FPMHNrUXkvZ2dRbS9ZVkYrczVxNEVo
bGVNQkxWSktEMVZwTTVMZUxERnBpdS95NGJWZDh3VWNnSytRUTkgQ29uY291cnNl"
  session-signing-key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd0xxbC9yVUlh
SStQWDdUbDNGV2NUZWU0c1FmOC9kYWFrQUxYeDk1NXRQd2tocWxZCmU0VDJWODRwL3lsRnZOV3BN
NHZmY01ZS2ZNWTBKTEtnQWdCdkpoQ3l0U2tEQmhUQm9XbU42eUUwQUIxMVA5RW4KbElaUkJXTllx
YUMyY1NnZTJaRDhxT1Nud2ZGaG5RQVc4KzdwRStFbEpBVmg3ZHRkRjNBNDc4SDUwbElpZ3E4SQp6
TVdwMkVHSnBGQzcvVXUzNm9JTC8wM01OR0NtckgxanZ0VHVKaUFNUVVaWXlMMVJlQmt2dkhPenc5
aTRIWFB5ClNNVnRjbGxtNE5CczJhVlB0d2hyMmt3U2tMdDh0MWJQZFJuNk9JeUVBdzVXa3R6QUth
aVpua1R2ajZnM3h6ZHAKektjcmRsQnI5YXpubE52b1NpbkJVZnZ0d3lGbXZGTjFISGJBOXdJREFR
QUJBb0lCQUU3Ry9EclVmSTlndnRYNwo5MGpNcFlzaWdGZThVQ2pobzJQaUJabG8wbzZyMGJKSlhp
VisvOEo4UHFaUmxIUFBVYzRFQ2x6cVZqY1NQUllTCi9WeFVHUnFTRUxvRC9YeHExNHJHdm4reG5y
TzlWc096Rmw2YldGcS9kT3BCQ3RITitHNHQyVmlmdmdLRVM4WUUKMTF6MTlzZHRhK1VCWGpuL1JG
bmtRU0dmUkNJM1FxVGFZdmp4ZXZ0MHVXbHlQbXFrRlBRUXc4YnZISVh6b0IrQgpyemVpTWErK25N
dmJYNXBBSDlYQTBCdmh5dUgzZkhpZFRVd2lWQnBrTWNwTFd0alAwQTBKVHNlY0RkYmluRERxCnVu
MkVJbzh6TVdSd0tRTi9KblV4c2k4QVVFaWdCVENVcWVEZ1JFWHRXNjJ1dkZrU3BjVk1Yd21WaXR5
TFlJVnkKcW5WTFVDRUNnWUVBNkl3WGtQMXFuU2ZjTmVvVkkveXBEdXoxL2tkcWNqU1BoTFllK2pk
aUxMb0ZrTVc5QWxEbQpsendOYVdsVEZEOXlnbytOakpDbzYzL0E4SENtNTVzYWp3czVoWjZyMjB2
ZFpjS0ZNazloMHFGNW9WQTdsa1EyCmd2RzJXYXpudVU3S2txaGZQK3BYaGlMZ1pLb0prc3QvK2c3
cjZ1SHByZWR3RFk2aHhlQks0dnNDZ1lFQTFDcUgKOHl3QzVxVW8vMzZrUWcvVFUyYWROL1lFSGRK
QUFiVTIzRVZyR1FTVm1uWFcwOEgyTkxGazB0c3hyd29ObmJncApQSWsySjdCaW1iSnZiTkQxN2li
cjRHQWtsRFRzUjhhSmtEbCswSmdOQ0FLOU4wN3FWdDFzN0ZYemhnOTVqVUw5CkVRVzU1ejYwR0FK
cGVjcU53QTRKc2E4UDg1Mk4wMzU1T2JwOTJUVUNnWUJrT0J2ZjdKY0o2NmZIeEg0ZjZEK2oKb3hQ
UTVrNUZzY2s0VkpTOUdTbENSVmtvcjA5cHRCdnNpWUR1TU9vUkM5YjUxWXdYVEREQWJXcGxOT2Q1
WVNydApBdFZqZEtKei9Cb0tSTzdLWTlPd3hzNTRhdStETHhxZkREU2VLUm9ram9SVytDRTBsblhw
NVJYM3pDQWNGMytyCjhNcFRpOUQ5bFlTQkV6czg0QkRtQ1FLQmdRQ01jSDYvSzNIY0pKVm4wZmQr
dHlVR2Z0VXc5c3N3eGp5U0pOYmsKcFpySDI2My9xV01EbHMrWGY1a2lyZTlNVTFaQ0FXWmlhTjBO
Rm9lZC8yd2NWcEdFREFWMDU0OHUvMzByNGJLcgpZak9jZGhtaUpOWUZKMXFkRjBNRGliMkNEdnBC
MUliWlhyWDQ2UnVqRE8ydXJiSjQzNUh4S05WaFIvaGFkOHhjCnR5S1l4UUtCZ0NWRGhOME1obmxV
UUpWWmZYNDJBUG1GNGdRZzByM3NmTC9OR1hqRWpNSUtLRmU1YTg4ZVpWSHIKTDh4MStkcDBxN2N6
QzhhL2wxRFV1aXdES2w4T0VweExzR0NxL0ovd0FmclNNUGlmdTZFVWxiVXdsSk9QZGdoYQorcC9L
RkFlbEhYSjJ3Lzh5YWNrQWNhcmgzNVZQN2l4aHV2eHN3SE5kZ3Zmc0JURmNqbjMwCi0tLS0tRU5E
IFJTQSBQUklWQVRFIEtFWS0tLS0t"
  worker-key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdVBlaFVtQlhB
UUNvQTdUTEFRQ1loZit2emNaVnlqK1ZHWG5NaExIbldMazdkUmpvCkNVOEdnTmFtZFM1aDdHM3l3
eE92S0EzWWpPTHI4WHlPTUxTNGMrZThON3RJemxNV2RpWGhlMGxjQkg5WjFhaTUKK0JvZjMvQmxE
VUJrc2lLZGMxQStRY2ZYNnREd01rT081cmUxSDR2T0szSC9DeXBlNTh3Q0IwM0hZTmdiMDVFRApm
VzFCajJxdnoyOVZ0bXlqd0VNdURzMTAwaU1xd0NmUFV4OW94WG1tWDhzVUJSbXcvWTFSeC84cGRL
SWpLdzNtCmtXSUhIQk9TQ1BpbU8xcUM0N0FhOHYvVUg5aEVSQ3lreXVGSGlCaUtsbkl2WldtOWJZ
dmhzUlR6NGd0NUt6UlkKNk9JMG9WZUhsTE9IRFNLNDhEYThWV2lqMTVsT3FPMk54Nldzc1FJREFR
QUJBb0lCQURFVDIyVU5GT2k2TU5wUwo1UzVONXlwZXpsbk9EME5MblpjVjN6TXlOUTB3a05zZ0Vh
a3VvNjRaeGk3L2NKSVlGanEyaFZvZVdsLy9jZFV3ClZGWU9EWWNMYk1CbzNBZUt1a0g5Q1JmNlBn
VWZlVW1jckVOdFF4bmJJaVRpK2hUZDVHTU5Yb2Q3ckFtdENKNTkKbUhRVk9HUzNacXZXWW5LbStt
bU1rdGszUlBpbnluWC9BNHkzV0hQYWN1QVM1OEhNMDlDazQzV2NITXhiR3BzTAovZ1pwSUN5Rlla
MkR2aU0rQUh5V0djbXc3TEpycEMwUUhvNitCQUZNczR4bFVlY05nVklGVXBmT29BY2ZzZHRHCks5
ajRBYnVaNDdpRmlzYmF5KzFweWcvN081ZVJUZEdWUVJ0YzdQQk1PamVhNWpHc2ZtbERtZG4xWlM1
MHlrdW4KQU5mb1E1VUNnWUVBOUFrNzNQUnk5bkxsUmt0NE9CQ0YvNGZ3VGhVQ01lZHNuV2FWalFC
TUpZaW00RkIyaXZGNQpjS2RXdDN5L1JaSTg1S0tZdTBFWGhMRW9TSUVBZnowNTdSOHQzUWRWSzR0
Wng2QjQ3VUZqQmpDWWVWTXR3SERRCnByeFFpT1BISUhDcGxCTkZ1R3pBNVZYTDlnUUxSRCtlazB1
T3kyR0pKMFd1MXh5ZW91SStTVzhDZ1lFQXdna08KVE90T29ncW1jQUFMaldnZWVRaVpldGZsU0ti
SmxwUU5obUNQQU1tMFNGSThlRjRTcFJYTHpkNDFWQzJtTEl3VApMM3RqYzcvOG9jWG9FbEZNNEww
Zm85THgvU0hGSDRKRW41RlQwUFhQbXZzRjJKUmhzWEpGTEpTaWh4Ri85MVhzCjJhQmNRSUxQRnpM
Y3JJNk9GVWFrTndHVFUvQ0l4cGt6UnZRckc5OENnWUVBek5WblV1bzRDTmFkemFnUkszWHIKRTNZ
bDVWUksrRnBZMTdGQWZBNncyNXhjL2RGci91bjYxZTBQbzRuby9sdG1FejdMVmZtbjVPL1NjVEVl
bXE1bwpqYmpyQlNoZmUrSkdwSUgwbnFpUWxxUjVodlNqWlhFTUliZlZIV0diUllaclFHZ0EwSEV3
WkE3azJRWEI4ekkzClIwbFhmU3pNTTVPUTB1d3AxMnh4ZmE4Q2dZQkhJTHExUjZ6VGljUHBXcHJo
ZzBGb2JOYVdTWDRyVzdpYUVqdkMKL3JKdFA0TnUzM1o3U1VEY2MxajZabkoySVNYQlByZnB0L21F
L09QSENaMUEyYnlzeGFkTGpwQldrb0tJUW1DVgpmZGlUeVFnSmIrdDhzU2YrdkR6UFVzMGhaakRh
b2d6bzJmZjNUZnhNTE1Eb0lIbkZJdGdmc2R3bjhReXlnSVpqCmhDNHBVUUtCZ1FEcXN4bmtJNnlY
RkU1Z3Noblc3SDh6cUtObHpLZC9kWkVMNmUrbFJ6NFIzVVkvS2NFa1JBZnEKWWkzY3dvOWZFM1Uz
a1NtcGw1TVF3VWpXbS9CWjdKeXVlb1kvNG5kd2FGUGdjMzRJS3NnSjB3YXU5cFppUUFCMQpEeHBP
U0YrQlI3MUp4M3N4dklkQ09ETlR0bTY0NWo1eXJaVm5KQXVNUG9mbzVYRm11bkRvSkE9PQotLS0t
LUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="
  worker-key-pub: "c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDNDk2RlNZRmNCQUtnRHRNc0JB
SmlGLzYvTnhsWEtQNVVaZWN5RXNlZFl1VHQxR09nSlR3YUExcVoxTG1Ic2JmTERFNjhvRGRpTTR1
dnhmSTR3dExoejU3dzN1MGpPVXhaMkplRjdTVndFZjFuVnFMbjRHaC9mOEdVTlFHU3lJcDF6VUQ1
Qng5ZnEwUEF5UTQ3bXQ3VWZpODRyY2Y4TEtsN256QUlIVGNkZzJCdlRrUU45YlVHUGFxL1BiMVcy
YktQQVF5NE96WFRTSXlyQUo4OVRIMmpGZWFaZnl4UUZHYkQ5alZISC95bDBvaU1yRGVhUllnY2NF
NUlJK0tZN1dvTGpzQnJ5LzlRZjJFUkVMS1RLNFVlSUdJcVdjaTlsYWIxdGkrR3hGUFBpQzNrck5G
am80alNoVjRlVXM0Y05Jcmp3TnJ4VmFLUFhtVTZvN1kzSHBheXggQ29uY291cnNl"
  github-auth-client-id: ""
  github-auth-client-secret: ""
  gitlab-auth-client-id: ""
  gitlab-auth-client-secret: ""
  generic-oauth-client-id: ""
  generic-oauth-client-secret: ""
  encryption-key: ""
  old-encryption-key: ""


---

apiVersion: v1
kind: Service
metadata:
  name: test-web
  labels:
    app: test-web
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"
spec:
  type: ClusterIP
  ports:
    - name: atc
      port: 8080
      targetPort: atc
    - name: tsa
      port: 2222
      targetPort: tsa
  selector:
    app: test-web


---

## A Headless Service is required when using a StatefulSet
## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/
##
apiVersion: v1
kind: Service
metadata:
  name: test-worker
  labels:
    app: test-worker
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"
spec:
  type: ClusterIP
  clusterIP: None
  ## We do NOT expose any port as workers will forward connections with the ATC through a TSA reverse-tunnel
  ## ref: https://concourse.ci/architecture.html#architecture-worker
  ##
  ports: []
  selector:
    app: test-worker


---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: test-worker
  labels:
    app: test-worker
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"

spec:
  serviceName: test-worker
  replicas: 2
  template:
    metadata:
      labels:
        app: test-worker
      annotations:
        iam.amazonaws.com/role: "arn:aws:iam::123456789012:role/concourse"
    spec:
      terminationGracePeriodSeconds: 120
      containers:
        - name: test-worker
          image: "concourse/concourse:3.3.2"
          imagePullPolicy: ""
          command:
            - /bin/sh
          args:
            - -c
            - |-
              cp /dev/null /concourse-work-dir/.liveness_probe
              concourse worker --name=${HOSTNAME} | tee -a /concourse-work-dir/.liveness_probe
              sleep ${POST_STOP_DELAY_SECONDS}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |-
                  FATAL_ERRORS=$( echo "${LIVENESS_PROBE_FATAL_ERRORS}" | grep -q '\S' && \
                      grep -F "${LIVENESS_PROBE_FATAL_ERRORS}" /concourse-work-dir/.liveness_probe )
                  cp /dev/null /concourse-work-dir/.liveness_probe
                  if [ ! -z "${FATAL_ERRORS}" ]; then
                    >&2 echo "Fatal error detected: ${FATAL_ERRORS}"
                    exit 1
                  fi
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - "concourse retire-worker --name=${HOSTNAME}"
          env:
            - name: CONCOURSE_TSA_HOST
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-tsa-host
            - name: CONCOURSE_TSA_PORT
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-tsa-port
            - name: CONCOURSE_GARDEN_DOCKER_REGISTRY
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: garden-docker-registry
            - name: CONCOURSE_GARDEN_INSECURE_DOCKER_REGISTRY
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: garden-insecure-docker-registry
            - name: CONCOURSE_TSA_PUBLIC_KEY
              value: "/concourse-keys/host_key.pub"
            - name: CONCOURSE_TSA_WORKER_PRIVATE_KEY
              value: "/concourse-keys/worker_key"
            - name: CONCOURSE_WORK_DIR
              value: "/concourse-work-dir"
            - name: CONCOURSE_BAGGAGECLAIM_DRIVER
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-baggageclaim-driver
            - name: POST_STOP_DELAY_SECONDS
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: worker-post-stop-delay-seconds
            - name: LIVENESS_PROBE_FATAL_ERRORS
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: worker-fatal-errors
          resources:
            requests: {cpu: 100m, memory: 512Mi}
          securityContext:
            privileged: true
          volumeMounts:
            - name: concourse-keys
              mountPath: /concourse-keys
              readOnly: true
            - name: concourse-work-dir
              mountPath: /concourse-work-dir
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: test-worker
                  release: "test"
      volumes:
        - name: concourse-keys
          secret:
            secretName: test-concourse
            defaultMode: 0400
            items:
              - key: host-key-pub
                path: host_key.pub
              - key: worker-key
                path: worker_key
              - key: worker-key-pub
                path: worker_key.pub
  volumeClaimTemplates:
    - metadata:
        name: concourse-work-dir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"


---

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: test-worker
  labels:
    app: test-worker
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: test-worker


---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test-web
  labels:
    app: test-web
    chart: "concourse-0.7.0"
    release: "test"
    heritage: "concourse"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test-web
    spec:
      containers:
        - name: test-web
          image: "concourse/concourse:3.3.2"
          imagePullPolicy: ""
          args:
            - "web"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: postgresql-host
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: postgresql-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: postgresql-database
            - name: CONCOURSE_POSTGRES_DATA_SOURCE
              value: postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST)/$(POSTGRES_DATABASE)?sslmode=disable
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONCOURSE_BIND_PORT
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-atc-port
            - name: CONCOURSE_PEER_URL
              value: "http://$(POD_IP):$(CONCOURSE_BIND_PORT)"
            - name: CONCOURSE_BASIC_AUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: basic-auth-username
            - name: CONCOURSE_BASIC_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: basic-auth-password
            - name: CONCOURSE_TSA_BIND_PORT
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-tsa-port
            - name: CONCOURSE_ALLOW_SELF_SIGNED_CERTIFICATES
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-allow-self-signed-certificates
            - name: CONCOURSE_AUTH_DURATION
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-auth-duration
            - name: CONCOURSE_RESOURCE_CHECKING_INTERVAL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-resource-checking-interval
            - name: CONCOURSE_OLD_RESOURCE_GRACE_PERIOD
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-old-resource-grace-period
            - name: CONCOURSE_RESOURCE_CACHE_CLEANUP_INTERVAL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: concourse-resource-cache-cleanup-interval
            - name: CONCOURSE_GITHUB_AUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: github-auth-client-id
            - name: CONCOURSE_GITHUB_AUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: github-auth-client-secret
            - name: CONCOURSE_GITHUB_AUTH_AUTH_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: github-auth-auth-url
            - name: CONCOURSE_GITHUB_AUTH_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: github-auth-token-url
            - name: CONCOURSE_GITHUB_AUTH_API_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: github-auth-api-url
            - name: CONCOURSE_GITLAB_AUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: gitlab-auth-client-id
            - name: CONCOURSE_GITLAB_AUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: gitlab-auth-client-secret
            - name: CONCOURSE_GITLAB_AUTH_AUTH_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: gitlab-auth-auth-url
            - name: CONCOURSE_GITLAB_AUTH_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: gitlab-auth-token-url
            - name: CONCOURSE_GITLAB_AUTH_API_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: gitlab-auth-api-url
            - name: CONCOURSE_GENERIC_OAUTH_DISPLAY_NAME
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: generic-oauth-display-name
            - name: CONCOURSE_GENERIC_OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: generic-oauth-client-id
            - name: CONCOURSE_GENERIC_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: test-concourse
                  key: generic-oauth-client-secret
            - name: CONCOURSE_GENERIC_OAUTH_AUTH_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: generic-oauth-auth-url
            - name: CONCOURSE_GENERIC_OAUTH_AUTH_URL_PARAM
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: generic-oauth-auth-url-param
            - name: CONCOURSE_GENERIC_OAUTH_SCOPE
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: generic-oauth-scope
            - name: CONCOURSE_GENERIC_OAUTH_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: test-concourse
                  key: generic-oauth-token-url
            - name: CONCOURSE_TSA_HOST_KEY
              value: "/concourse-keys/host_key"
            - name: CONCOURSE_SESSION_SIGNING_KEY
              value: "/concourse-keys/session_signing_key"
            - name: CONCOURSE_TSA_AUTHORIZED_KEYS
              value: "/concourse-keys/worker_key.pub"
          ports:
            - name: atc
              containerPort: 8080
            - name: tsa
              containerPort: 2222
          livenessProbe:
            httpGet:
              path: /
              port: atc
            initialDelaySeconds: 120
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: atc
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests: {cpu: 100m, memory: 128Mi}
          volumeMounts:
            - name: concourse-keys
              mountPath: /concourse-keys
              readOnly: true
      affinity:
      volumes:
        - name: concourse-keys
          secret:
            secretName: test-concourse
            defaultMode: 0400
            items:
              - key: host-key
                path: host_key
              - key: session-signing-key
                path: session_signing_key
              - key: worker-key-pub
                path: worker_key.pub