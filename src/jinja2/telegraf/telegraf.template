{%- if (length(Values.single.config.outputs.influxdb.urls))>0 %}
{%- if Values.single.enabled -%}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ self.fullname() }}-s
  labels:
    app: {{ self.fullname() }}
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
data:
  telegraf.conf: |+
    {{ template "global_tags" Values.single.config.global_tags }}
    {{ template "agent" Values.single.config.agent }}
    {{ template "outputs" Values.single.config.outputs }}
    {{ template "inputs" Values.single.config.inputs -}}
{%- endif -%}
{%- endif -%}#---{%- if (length(Values.daemonset.config.outputs.influxdb.urls))>0 %}
{%- if Values.daemonset.enabled -%}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ self.fullname() }}-ds
  labels:
    app: {{ self.fullname() }}-ds
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
    heritage: "{{ Release.Service }}"
data:
  telegraf.conf: |+
    {{ template "global_tags" Values.daemonset.config.global_tags }}
    {{ template "agent" Values.daemonset.config.agent }}
    {{ template "outputs" Values.daemonset.config.outputs }}
    {{ template "inputs" Values.daemonset.config.inputs -}}
{%- endif -%}
{%- endif -%}#---{%- if (length(Values.daemonset.config.outputs.influxdb.urls))>0 %}
{%- if Values.daemonset.enabled -%}
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ self.fullname() }}-ds
  labels:
    app: {{ self.fullname() }}-ds
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
spec:
  template:
    metadata:
      labels:
        app: {{ self.fullname() }}-ds
    spec:
      containers:
      - name: {{ self.fullname() }}
        image: "{{ Values.image.repo }}:{{ Values.image.tag }}"
        imagePullPolicy: {{ Values.image.pullPolicy | default("", true) | quote() }}
        resources:
{{ toYaml(Values.daemonset.resources) | indent(10) }}
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: "HOST_PROC"
          value: "/rootfs/proc"
        - name: "HOST_SYS"
          value: "/rootfs/sys"
        volumeMounts:
        - name: sysro
          mountPath: /rootfs/sys
          readOnly: true
        - name: procro
          mountPath: /rootfs/proc
          readOnly: true
        - name: docker-socket
          mountPath: /var/run/docker.sock
          # readOnly: true
        - name: varrunutmpro
          mountPath: /var/run/utmp
          readOnly: true
        - name: config
          mountPath: /etc/telegraf
      volumes:
      - name: sysro
        hostPath:
          path: /sys
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: procro
        hostPath:
          path: /proc
      - name: varrunutmpro
        hostPath:
          path: /var/run/utmp
      - name: config
        configMap:
          name: {{ self.fullname() }}-ds
{%- endif -%}
{%- endif -%}#---{%- if Values.single.enabled -%}
{%- if Values.single.service.enabled -%}
apiVersion: v1
kind: Service
metadata:
  name: {{ self.fullname() }}-s
  labels:
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
spec:
  type: {{ Values.single.service.type }}
  ports:
  {%- for key, value in Values.single.config.inputs.iteritems() %}
    {%- if key=="http_listener" %}
  - port: {{ trimPrefix ":" value.service_address | int64() }}
    targetPort: {{ trimPrefix ":" value.service_address | int64() }}
    name: "http-listener"
    {%- endif %}
    {%- if key=="statsd" %}
  - port: {{ trimPrefix ":" value.service_address | int64() }}
    targetPort: {{ trimPrefix ":" value.service_address | int64() }}
    name: "statsd"
    {%- endif %}
    {%- if key=="tcp-listener" %}
  - port: {{ trimPrefix ":" value.service_address | int64() }}
    targetPort: {{ trimPrefix ":" value.service_address | int64() }}
    name: "tcp_listener"
    {%- endif %}
    {%- if key=="udp-listener" %}
  - port: {{ trimPrefix ":" value.service_address | int64() }}
    targetPort: {{ trimPrefix ":" value.service_address | int64() }}
    name: "udp_listener"
    {%- endif %}
    {%- if key=="webhooks" %}
  - port: {{ trimPrefix ":" value.service_address | int64() }}
    targetPort: {{ trimPrefix ":" value.service_address | int64() }}
    name: "webhooks"
    {%- endif %}
  {%- endfor %}
  selector:
    app: {{ self.fullname() }}-s
{%- endif -%}
{%- endif -%}#---{%- if (length(Values.single.config.outputs.influxdb.urls))>0 %}
{%- if Values.single.enabled -%}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ self.fullname() }}-s
  labels:
    app: {{ self.fullname() }}-s
    chart: "{{ Chart.Name }}-{{ Chart.Version }}"
    release: "{{ Release.Name }}"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ self.fullname() }}-s
    spec:
      containers:
      - name: {{ self.fullname() }}
        image: "{{ Values.image.repo }}:{{ Values.image.tag }}"
        imagePullPolicy: {{ Values.image.pullPolicy | default("", true) | quote() }}
        resources:
{{ toYaml(Values.single.resources) | indent(10) }}
        volumeMounts:
        - name: config
          mountPath: /etc/telegraf
      volumes:
      - name: config
        configMap:
          name: {{ self.fullname() }}-s
{%- endif -%}
{%- endif -%}